# Flask Monolith Template - Docker Compose
version: '3.8'

services:
  # Aplicação Flask
  web:
    build: .
    container_name: flask-monolith-web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/flask_monolith
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key}
      - MAIL_SERVER=${MAIL_SERVER:-localhost}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-True}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - flask-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: flask-monolith-db
    environment:
      - POSTGRES_DB=flask_monolith
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - flask-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: flask-monolith-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flask-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: flask-monolith-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - web
    networks:
      - flask-network
    restart: unless-stopped
    profiles:
      - production

  # Adminer para gerenciamento do banco (desenvolvimento)
  adminer:
    image: adminer:latest
    container_name: flask-monolith-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - flask-network
    restart: unless-stopped
    profiles:
      - development

  # Mailhog para testes de email (desenvolvimento)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: flask-monolith-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - flask-network
    restart: unless-stopped
    profiles:
      - development

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Rede personalizada
networks:
  flask-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configurações adicionais para desenvolvimento
x-development: &development
  environment:
    - FLASK_ENV=development
    - FLASK_DEBUG=True
  volumes:
    - .:/app
  command: python app.py

# Configurações adicionais para produção
x-production: &production
  environment:
    - FLASK_ENV=production
    - FLASK_DEBUG=False
  deploy:
    replicas: 2
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.25'
        memory: 256M
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s